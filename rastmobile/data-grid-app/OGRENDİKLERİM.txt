Veri Tablosu Sütunlarının Tanımlanması:

Veri tablosunun sütunları tanımlanır. Her sütun için bir isim, seçici (selector) ve sıralanabilirlik (sortable) özelliği belirlenir.

const columns = [
  {
    name: "ID",
    selector: row => row.id,
    sortable: true
  },
  {
    name: "Name",
    selector: row => row.name,
    sortable: true
  },
  {
    name: "Email",
    selector: row => row.email
  },
  {
    name: "City",
    selector: row => row.city
  }
];
Durum Yönetimi (State Management):

useState hook'u kullanılarak çeşitli durumlar tanımlanır.

const [records, setRecords] = useState([]);
const [filterRecords, setFilterRecords] = useState([]);
const [showForm, setShowForm] = useState(false);
const [formData, setFormData] = useState({ name: '', email: '', city: '' });
Veri Çekme (Data Fetching):




useEffect(() => {
  const fetchData = async () => {
    axios.get('https://jsonplaceholder.typicode.com/users')
      .then(res => {
        const users = res.data.map(user => ({
          id: user.id,
          name: user.name,
          email: user.email,
          city: user.address.city
        }));
        setRecords(users);
        setFilterRecords(users);
      })
      .catch(err => console.log(err));
  };
  fetchData();
}, []);
Filtreleme İşlevi (handleFilter):

Kullanıcının arama kutusuna girdiği değere göre veri tablosunu filtreler.

const handleFilter = (event) => {
  const newData = filterRecords.filter(row => row.name.toLowerCase().includes(event.target.value.toLowerCase()));
  setRecords(newData);
};
Form Gönderme İşlevi (handleFormSubmit):

Form gönderildiğinde yeni bir kayıt ekler.

javascript
const handleFormSubmit = (e) => {
  e.preventDefault();
  const newRecord = {
    id: records.length + 1,
    ...formData
  };
  setRecords([...records, newRecord]);
  setFilterRecords([...records, newRecord]);
  setShowForm(false);
  setFormData({ name: '', email: '', city: '' });
};
Girdi Değişikliği İşlevi (handleInputChange):

Formdaki giriş alanlarında değişiklik olduğunda form verilerini günceller.

javascript
const handleInputChange = (e) => {
  const { name, value } = e.target;
  setFormData({ ...formData, [name]: value });
};







ogrendiklerim:

react js, vite js ve next js arasındaki farklar:
Amaç ve Kullanım Alanı:

React JS: Kullanıcı arayüzleri oluşturmak için bir kütüphane.

Vite JS: Hızlı geliştirme ortamı sağlayan bir araç.

Next JS: React tabanlı uygulamalar için bir framework.

Performans:

React JS: Performans optimizasyonları geliştiriciye bırakılmıştır.

Vite JS: Hızlı başlangıç ve geliştirme süreci sunar.

Next JS: Sunucu tarafı render ve statik site oluşturma ile performanslı uygulamalar sağlar.

Özellikler:

React JS: Bileşen tabanlı yapı, sanal DOM, tek yönlü veri akışı.

Vite JS: Hızlı yeniden yükleme, ES module desteği, düşük başlangıç süresi.

Next JS: Sunucu tarafı render, statik site oluşturma, sayfa yönlendirme, API rotaları.



redux toolkid:Redux Toolkit, asenkron işlemleri yönetmek için createAsyncThunk fonksiyonunu sağlar. Bu, asenkron aksiyonları daha kolay ve okunabilir hale getirir.

react developer tool:bileşenler arasında gezinme,durum ve özellik inceleme,performans analizi sağlar.
